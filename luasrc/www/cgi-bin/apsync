#!/usr/bin/lua

exectime = os.clock()

local ltn12 = require("luci.ltn12")
require("nixio.util")
require("luci.http")
require("luci.sys")


local function limitsource(handle, limit)
	limit = limit or 0
	local BLOCKSIZE = ltn12.BLOCKSIZE

	return function()
		if limit < 1 then
			handle:close()
			return nil
		else
			local read = (limit > BLOCKSIZE) and BLOCKSIZE or limit
			limit = limit - read

			local chunk = handle:read(read)
			if not chunk then handle:close() end
			return chunk
		end
	end
end

function hex2mac(mac)
	local mac1={}
	for i=1,12,2 do
		mac1[1+#mac1]=string.sub(mac, i,i+1)
	end
	return table.concat(mac1,":");
end

function apgetdispatch(request, prefix)
	luci.http.context.request = request
	
	luci.http.prepare_content("text/plain")
	
	local get = {
		["macaddr"]=hex2mac(luci.http.formvalue("MAC")),
		["ip"]=luci.http.formvalue("IP"),
		["model"]=luci.http.formvalue("MODEL"),
		["power"]=luci.http.formvalue("TXPOWER"),
		["channel"]=luci.http.formvalue("CHANNEL"),
		["ssid"]=luci.http.formvalue("SSID"),
		['maxassoc']=luci.http.formvalue("MAXASSOC"),
	}
	if nil==get['maxassoc'] then get['maxassoc'] = 'nolimit' end
	local diff = {}

	local uci = require("luci.model.uci").cursor()
	local node = nil
	
	luci.http.write(table.concat(get,"\n"))
	
	
	uci:foreach("ap","ap",function(s)
		if s.macaddr == get["macaddr"] then
			node = s
			return false
		end
	end)
	
	if nil == node then
		local node = uci:add("ap","ap")
		for key,val in pairs(get) do
			uci:set("ap",node,key,val)
		end
		uci:set("ap",node,"nick","noname")
		uci:commit("ap")
		uci:save("ap")
	else
		local changed = false
		for key,val in pairs(node) do
			if val ~= get[key] then
				if "ip"==key then
					changed = true
					uci:set("ap",node['.name'], key, get[key])
				elseif 'nick' ~= key and string.sub(key,1,1) ~='.' then
					diff[key]=val
				end
			end
		end
		if changed then
			uci:commit("ap")
			uci:save("ap")
		end
	end
	
	for key,val in pairs(diff) do
		luci.http.write(key.."="..val.."\n")	
	end

	luci.http.close()
end

function entry()
	local r = luci.http.Request(
		luci.sys.getenv(),
		limitsource(io.stdin, tonumber(luci.sys.getenv("CONTENT_LENGTH"))),
		ltn12.sink.file(io.stderr)
	)

	local x = coroutine.create(apgetdispatch)
	local hcache = ""
	local active = true

	while coroutine.status(x) ~= "dead" do
		local res, id, data1, data2 = coroutine.resume(x, r)

		if not res then
			print("Status: 500 Internal Server Error")
			print("Content-Type: text/plain\n")
			print(id)
			break;
		end

		if active then
			if id == 1 then
				io.write("Status: " .. tostring(data1) .. " " .. data2 .. "\r\n")
			elseif id == 2 then
				hcache = hcache .. data1 .. ": " .. data2 .. "\r\n"
			elseif id == 3 then
				io.write(hcache)
				io.write("\r\n")
			elseif id == 4 then
				io.write(tostring(data1 or ""))
			elseif id == 5 then
				io.flush()
				io.close()
				active = false
			elseif id == 6 then
				data1:copyz(nixio.stdout, data2)
				data1:close()
			end
		end
	end
end
-- entry
entry()